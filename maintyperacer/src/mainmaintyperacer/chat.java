/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mainmaintyperacer;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author saloni
 */
public class chat extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form chat
     */
    Socket sock;
    private Scanner input;
    private PrintWriter output;
    String message="";
    public chat() {
        initComponents();
    }
    public chat(Socket x)
    { 
        this.sock=x;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public void CheckConnection()throws Exception
    {
        int i;
        if(!sock.isConnected())
        {
            for(i=1;i<=server1.ConnectionArray.size();i++)
            {
             if(server1.ConnectionArray.get(i)==sock)
             {
                 server1.ConnectionArray.remove(i);
             }
            }
            
            for( i=1;i<=server1.ConnectionArray.size();i++)
            {
                Socket temp=(Socket)server1.ConnectionArray.get(i-1);
                PrintWriter temp_out=new PrintWriter(temp.getOutputStream());
                temp_out.println(temp.getLocalAddress().getHostName()+"disconnected");
                temp_out.flush();
            }
            
        }
    }
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new chat().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        int i;
//       System.out.println("ssss");
        try
        {
            try
            {
                input=new Scanner(sock.getInputStream());
                output=new PrintWriter(sock.getOutputStream());
                output.flush();
                while(true)
                {
                    System.out.println("hoho");
                //    CheckConnection();
                    System.out.println("$$$$"+input.hasNext());
                    if(!input.hasNext())
                        return;
                    message=input.nextLine();
                    System.out.println("Client said:"+message);
                    if(message.startsWith("##"))
                    {
                        String temp=message.substring(2);
                        server1.leader.add(temp);
                         for(i=1;i<=server1.ConnectionArray.size();i++)
                   {
                       Socket temp1=(Socket)server1.ConnectionArray.get(i-1);
                       PrintWriter temp_out=new PrintWriter(temp1.getOutputStream());
                       temp_out.println("##"+server1.leader);
                       temp_out.flush();
                       System.out.println("Send to:"+temp1.getLocalAddress().getHostName());
                   }
                       
                    }
                    else
                    {
                            for(i=1;i<=server1.ConnectionArray.size();i++)
                   {
                       Socket temp1=(Socket)server1.ConnectionArray.get(i-1);
                       PrintWriter temp_out=new PrintWriter(temp1.getOutputStream());
                       temp_out.println(message);
                       temp_out.flush();
                       //System.out.println("Send to:"+temp1.getLocalAddress().getHostName());
                   }
                        
                    }
                    

                } 
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
            finally
            {
                sock.close();
                    }
        }
        catch(Exception e)
        {
            e.printStackTrace();
                   
        //throw new UnsupportedOperationException("Not supported yet.");
    }
    
}
    public void check()
    {
        while(true)
        {
           receive(); 
        }
    }
    public void receive()
    {
        if(input.hasNext())
        {
            String Message = input.nextLine();
            if(Message.contains("##"))
            {
//                System.out.println("yes");
                String tmp1=Message.substring(2);
//                tmp1 = tmp1.replace("[","");
   //             tmp1 = tmp1.replace("]","");
                String[] CurrentUsers = tmp1.split(", ");
               //clientmainserver.JLonline.setListData(CurrentUsers);
         //       clientmain.JLonline.setListData(CurrentUsers);
           System.out.println(tmp1);
            }
        }
    }
}