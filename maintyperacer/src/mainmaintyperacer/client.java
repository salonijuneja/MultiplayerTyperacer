/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mainmaintyperacer;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author saloni
 */
public class client extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form client
     */
    String username;
    PrintWriter out;
    Scanner input;
    Socket sock;
    public client() {
        initComponents();
    }
     public client(Socket x,String user) {
        initComponents();
        sock=x;
        username=user;
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                throw new UnsupportedOperationException("Not supported yet.");
            }

                
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
String Values[];
    @Override
    public void run() {
        //throw new UnsupportedOperationException("Not supported yet.");
         try
             {
               try
               {
        input=new Scanner(sock.getInputStream());
        out= new PrintWriter(sock.getOutputStream());
        out.flush();
        check();
               }
               finally
               {
                   sock.close();
               }
             }     
            catch(Exception e)
            {
             e.printStackTrace();   
            }
    }
    public void check()
    {
        while(true)
        {
           receive(); 
        }
    }
    public void receive()
    {
        if(input.hasNext())
        {
            String Message = input.nextLine();
            if(Message.contains("!!"))
            {
                String tmp1=Message.substring(3);
                tmp1 = tmp1.replace("[","");
                tmp1 = tmp1.replace("]","");
                String[] CurrentUsers = tmp1.split(", ");
               //clientmainserver.JLonline.setListData(CurrentUsers);
                clientmain.JLonline.setListData(CurrentUsers);
            }
            else if(Message.contains("**"))
            {
                String tmp=Message.substring (2);
                int k=Integer.parseInt(tmp);
                GameMulti ob=new GameMulti(username, k,sock);
                System.out.println("hello4"+username);
                ob.setVisible(true);
            }
            else if(Message.contains("##"))
            {
                String tmp=Message.substring(2);
                tmp = tmp.replace("[","");
                tmp = tmp.replace("]","");
                //
                        Values = tmp.split(", ");
                        int l=Values.length;
                         
                        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
        }
                        int i;
                   try {
            Connection con  =   (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/softa","root","");
           String q="delete from multi";
            PreparedStatement pst = (PreparedStatement) con.prepareStatement(q);
           pst.executeUpdate();
            for(i=0;i<l;i++)
            {    
                System.out.println("@"+Values[i]); 
                      q = "insert into multi (username,accuracy,speed) values (?,?,?)";
                  String val[]=Values[i].split("_");
           // PreparedStatement
                  pst = (PreparedStatement) con.prepareStatement(q);
            pst.setString(1, val[0]);
            pst.setString(2, val[1]);
            pst.setString(3,val[2]);
            int y=pst.executeUpdate();
            }
				  }
            catch (SQLException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
  
        }
                   
                    
            }
            else
            {
              clientmain.TA_conversation.append("\n"+Message);
            }
        }
    }
}
