/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainmaintyperacer;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.spi.DirStateFactory.Result;
import javax.swing.JOptionPane;

/**
 *
 * @author welcome
 */

public class Gameframe extends javax.swing.JFrame {
float ispeed;
    /**
     * Creates new form NewJFrame
     */
    String user="";
    public Gameframe() {
        initComponents();
    }
    public Gameframe(String username) {
         initComponents();
        user=username;
        showPara();
       jTextPane1.setEditable(false);
       tf.requestFocus(true);
       r=new StringTokenizer(para);
       t=r.countTokens();
        st=(int) System.currentTimeMillis();
       // tfActionPerformed(ActionEvent e);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        tf = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        jButton1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jButton1.setText("BACK to HOME");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(260, 220, 160, 30);

        tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfActionPerformed(evt);
            }
        });
        tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfKeyTyped(evt);
            }
        });
        getContentPane().add(tf);
        tf.setBounds(80, 160, 470, 30);

        jTextPane1.setEditable(false);
        jScrollPane2.setViewportView(jTextPane1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(80, 20, 467, 112);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/the-chromatic-typewriter-0.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(-6, -6, 600, 340);

        setSize(new java.awt.Dimension(607, 366));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Home obj2=new Home(user);
        obj2.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_jButton1ActionPerformed
String s;
int flag=0;
int st;
int et;
static String para="We are mnnit students";
int space=0,wrong=0;
int count=0,t;

StringTokenizer r;
    String ss ="";
    private void showPara()
    {   
         String  thisLine = null;
         int a;
         a=(int)(Math.random()*10);
      try{
         // open input stream test.txt for reading purpose.
         BufferedReader buffRdr = new BufferedReader(new FileReader(
				"C:\\Users\\welcome\\Desktop\\maintyperacer\\Para.txt"));
         while ((thisLine = buffRdr.readLine()) != null)
         {
         //thisLine = buffRdr.readLine();
         char ch = thisLine.charAt(0);
         thisLine = thisLine.substring(1);
                 
           int ch1=(ch-'0');
        System.out.println(ch1+"   "+a);
         if(ch1==a)
         {  
             para="";
             para=para+thisLine;
             System.out.println(para);
             //jLabel1.setText(para);
             jTextPane1.setText(para);
             return;
         }
         }     
      }catch(Exception e){
         e.printStackTrace();
        /* Create and display the form */
      }
    }
     private void showPara(int a)
    {   
         String  thisLine = null;
         
         //a=(int)(Math.random()*10);
      try{
         // open input stream test.txt for reading purpose.
         BufferedReader buffRdr = new BufferedReader(new FileReader(
				"C:\\Users\\welcome\\Desktop\\maintyperacer\\Para.txt"));
         while ((thisLine = buffRdr.readLine()) != null)
         {
         //thisLine = buffRdr.readLine();
         char ch = thisLine.charAt(0);
         thisLine = thisLine.substring(1);
                 
           int ch1=(ch-'0');
        System.out.println(ch1+"   "+a);
         if(ch1==a)
         {  
             para="";
             para=para+thisLine;
             System.out.println(para);
             //jLabel1.setText(para);
             jTextPane1.setText(para);
             return;
         }
         }     
      }catch(Exception e){
         e.printStackTrace();
        /* Create and display the form */
      }
    }
    private void tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfActionPerformed
       //showPara();
      r=new StringTokenizer(para);
       t=r.countTokens();
        st=(int) System.currentTimeMillis();
       /* tf.addKeyListener(new KeyAdapter(){
           public void keyTyped(KeyEvent e){
                char ch = e.getKeyChar(); 
                //s.append(ch);
              //  if(count==t)
                
                if(ch==' ')
                {space++;
                s=tf.getText();
                    //String s1=s.toString();
                    s=s.trim();
                  if(flag==0)
                  {
                      ss=r.nextToken();
                      flag=1;
                  }
                  if(s.equals(ss))
                  {tf.setBackground(Color.white);
                      System.out.println("word matched");
                      count++;
                      if(r.hasMoreTokens())
                      ss=r.nextToken();
                      else{
                          et=(int)System.currentTimeMillis();
                          System.out.println("you are done");
                          float time=(et-st)/1000f;
                          System.out.println("time is"+time+" "+space+" "+wrong);
                          float acc=(float)space/time;
                          Math.ceil(acc);
                          System.out.println("speed is words per second"+acc);
                          float a=(float)((float)(space-wrong)/(float)space)*100;
                          System.out.println("accuracy is"+a);
               //  Result1 obj=new Result1(acc,a);
                // obj.setVisible(true);
   
                 //this.setVisible(false);
   JOptionPane.showMessageDialog(null, "your accuracy is:"+a+"   "+"\nyour typing speed is:"+acc);      
                try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Connection con  =   (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/softa","root","");
                  String q = "insert into records (username,avracc,avrspeed,lastspeed) values (?,?,?,?)";

            PreparedStatement pst = (PreparedStatement) con.prepareStatement(q);
            pst.setString(1, user);
            pst.setFloat(2, a);
            pst.setFloat(3,acc);
            pst.setFloat(4,'5');
            int x=pst.executeUpdate();
				  }
            catch (SQLException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
  
        }
  }}
                 
                  
                  else
                  {
                      wrong++;
                      tf.setBackground(Color.red);
                     JOptionPane.showMessageDialog(rootPane, "Typing error");
                  }
                    
                s="";
                    tf.setText("");
                }
  
            }
        }); */
                     
// TODO add your handling code here:
    }//GEN-LAST:event_tfActionPerformed

    private void tfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfKeyTyped
        // TODO add your handling code here:
            // public void keyTyped(KeyEvent e){
          
      // Enter was pressed. Your code goes here.
   
        char ch = evt.getKeyChar();
                System.out.print(ch);
                //tf.getText();
               if(ch == KeyEvent.VK_SPACE)
                {
                    //System.out.println("hoho");
                    space++;
                    float itime=(int)System.currentTimeMillis();
                    //itime/=1000f;
                    ispeed=space/((float)(itime-st)/1000f);
                   ispeed=ispeed*1000;
                    int sss=(int)ispeed;
                    float ea=sss/1000f;
                    System.out.println(ea);
                    s=tf.getText();
                     s=s.trim();
                  if(flag==0)
                  {
                      ss=r.nextToken();
                      flag=1;
                  }
                  if(s.equals(ss))
                  {
                      tf.setBackground(Color.WHITE);
                      System.out.println("word matched");
                      count++;
                      if(r.hasMoreTokens())
                      ss=r.nextToken();
                      else{
                          et=(int)System.currentTimeMillis();
                          System.out.println("you are done");
                          float time=(et-st)/1000f;
                          System.out.println("time is"+time+" "+space+" "+wrong);
                          float speed=(float)space/time;
                          Math.ceil(speed);
                          System.out.println("speed is words per second"+speed);
                          float a=(float)((float)(space-wrong)/(float)space)*100;
                          speed=speed*1000;
                          int x=(int)speed;
                          speed=x/1000f;
                          a=(float) Math.ceil(a);
                          System.out.println("accuracy is"+a);
                          JOptionPane.showMessageDialog(null, "your accuracy is:"+a+"   "+"\nyour typing speed is:"+speed);      
                try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
        }
                   try {
            Connection con  =   (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/softa","root","");
                  String q = "insert into records (username,avracc,avrspeed,lastspeed) values (?,?,?,?)";

            PreparedStatement pst = (PreparedStatement) con.prepareStatement(q);
            pst.setString(1, user);
            pst.setFloat(2, a);
            pst.setFloat(3,speed);
            pst.setFloat(4,'5');
            int y=pst.executeUpdate();
            this.setVisible(false);
            HomePage ob=new HomePage(user);
            ob.setVisible(true);
				  }
            catch (SQLException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
  
        }
                      }}
                    
                  else
                  {
                      wrong++;
                      tf.setBackground(Color.red);
                  JOptionPane.showMessageDialog(rootPane, "Typing error");
                  }
                
                s="";
                tf.setText("");
                }
                  
                  //s.append(ch);
              //  if(count==t)
                
       /*     if(ch==' ')
                {space++;
                s=tf.getText();
                    //String s1=s.toString();
                    s=s.trim();
                  if(flag==0)
                  {
                      ss=r.nextToken();
                      flag=1;
                  }
                  if(s.equals(ss))
                  {tf.setBackground(Color.white);
                      System.out.println("word matched");
                      count++;
                      if(r.hasMoreTokens())
                      ss=r.nextToken();
                      else{
                          et=(int)System.currentTimeMillis();
                          System.out.println("you are done");
                          float time=(et-st)/1000f;
                          System.out.println("time is"+time+" "+space+" "+wrong);
                          float acc=(float)space/time;
                          Math.ceil(acc);
                          System.out.println("speed is words per second"+acc);
                          float a=(float)((float)(space-wrong)/(float)space)*100;
                          System.out.println("accuracy is"+a);
               //  Result1 obj=new Result1(acc,a);
                // obj.setVisible(true);
   
                 //this.setVisible(false);
   JOptionPane.showMessageDialog(null, "your accuracy is:"+a+"   "+"\nyour typing speed is:"+acc);      
                try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Connection con  =   (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/softa","root","");
                  String q = "insert into records (username,avracc,avrspeed,lastspeed) values (?,?,?,?)";

            PreparedStatement pst = (PreparedStatement) con.prepareStatement(q);
            pst.setString(1, user);
            pst.setFloat(2, a);
            pst.setFloat(3,acc);
            pst.setFloat(4,'5');
            int x=pst.executeUpdate();
				  }
            catch (SQLException ex) {
            Logger.getLogger(login.class.getName()).log(Level.SEVERE, null, ex);
  
        }
  }}
                 
                  
                  else
                  {
                      wrong++;
                      tf.setBackground(Color.red);
                     JOptionPane.showMessageDialog(rootPane, "Typing error");
                  }
                    
                s="";
                    tf.setText("");
                }
  
            }
     */   
    }//GEN-LAST:event_tfKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gameframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gameframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gameframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gameframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gameframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    public javax.swing.JTextField tf;
    // End of variables declaration//GEN-END:variables
}